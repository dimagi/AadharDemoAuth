from lxml import etree
import hashlib
import base64
from datetime import datetime
from M2Crypto import Rand

from .encryptor import DemoAuthEncryptor


class DemoAuthData:
    """
    Prep all data nodes for the final XML request
    """
    def __init__(self, cfg, uid, demo_details, lang, tid=None):
        """
        cfg: Config object generated by DemoAuthConfig setup
        uid: aadhaar number
        tid: terminal id of the machine that generated the beneficiary details pid block
        """
        self._cfg = cfg
        self._x509_cert = cfg.common.uid_cert_path
        self._tid = tid or cfg.common.tid
        self._uid = uid
        self._demo_details = demo_details
        self._lang = lang

        # even if we are not using the various options for authentication we still need to set
        # "n" for those in the request because they are mandatory fields.
        # We then update to "y" for the ones that we want to use.
        self._uses = {
            'otp': "n",
            'pin': "n",
            'bio': "n",
            'pfa': "n",
            'pi': "n",
            'pa': "n",
        }

    @property
    def uses(self):
        return self._uses

    def set_skey(self):
        """
        Generate session key
        self.__skey = {
            '_cert_expiry': None,  # expiry time of certificate used to encrypt session key
            '_text': None,  # encrypted and encoded session key
        }
        """
        encryptor = DemoAuthEncryptor(cfg=self._cfg, pub_key=self._x509_cert)

        # generate random session key
        self._session_key = Rand.rand_bytes(self._cfg.common.rsa_key_len)

        # encrypt session key
        encrypted_session_key = encryptor.x509_encrypt(self._session_key)
        self.__skey = {'_text': base64.b64encode(encrypted_session_key)}

        cert_expiry = encryptor.x509_get_cert_expiry()
        self.__skey['_cert_expiry'] = datetime.strptime(cert_expiry, "%b %d %H:%M:%S %Y %Z").strftime("%Y%m%d")

    @property
    def skey(self):
        return {
            'cert_expiry': self.__skey['_cert_expiry'],
            'text': self.__skey['_text'],
        }

    def set_data(self, ts=None):
        """
        Generate the content for the data node
        """
        ts = ts or datetime.now()

        # Create the pid element
        pid = etree.Element('Pid', xmlns=self._cfg.common.data_xmlns,
                            ts=ts.strftime("%Y-%m-%dT%H:%M:%S"),
                            ver="1.0"  # only expected value for version by UIDAI
                            )

        # Add the demographic elements
        self.set_demographic_details(pid)
        self._pidxml = etree.tostring(pid, pretty_print=False)

        # Encrypt and encode the pid xml
        encryptor = DemoAuthEncryptor(cfg=self._cfg)
        encrypted_pid = encryptor.aes_encrypt(key=self._session_key, msg=self._pidxml)
        self._data = base64.b64encode(encrypted_pid)

    @property
    def data(self):
        return self._data

    def set_hmac(self):
        """
        Computes the hmac which is base64 encoded AES encrypted hash of pid xml
        """
        data = self._pidxml
        hash_digest = hashlib.sha256(data).digest()

        encryptor = DemoAuthEncryptor(cfg=self._cfg)
        encrypted_hash = encryptor.aes_encrypt(key=self._session_key,
                                               msg=hash_digest)
        self._hmac = base64.b64encode(encrypted_hash)
        return self._hmac

    @property
    def hmac(self):
        return self._hmac

    @staticmethod
    def permitted_attributes(attr_type):
        return {
            "Pi": ['ms', 'mv', 'name', 'lname', 'lmv', 'gender', 'dob',
                   'dobt', 'age', 'phone', 'email'],
            "Pa": ['ms', 'co', 'house', 'street', 'lm', 'loc', 'vtc',
                   'subdist', 'dist', 'state', 'pc', 'po'],
            "Pfa": ['ms', 'mv', 'av', 'lav', 'lmv']
        }[attr_type]

    def set_demo_attributes(self, demo_node, elem_name, elem_data):
        specified_attributes = elem_data.keys()
        attributes = [i for i in specified_attributes if i in self.permitted_attributes(elem_name)]

        elem = etree.SubElement(demo_node, elem_name)
        # ensure 'ms' attribute which configures Exact or Partial match
        if "ms" not in specified_attributes:
            elem.set("ms", "E")

        # set node attrs
        if attributes:
            for attrib in attributes:
                elem.set(attrib, elem_data[attrib])
            return True
        return False

    def set_demographic_details(self, pid, ts=None):
        """
        Generate the demographics XML payload. Use the
        set_demo_attributes for each of the specified attributes.
        Expected data to be like:
        <Pi ms="E|P" mv="" name="" lname="" lmv="" gender="M|F|T" dob="" dobt="V|D|A" age="" phone="" email=""/>
        <Pa ms="E" co="" house="" street="" lm="" loc=""
            vtc="" subdist="" dist="" state="" country="" pc="" po=""/>
        <Pfa ms="E|P" mv="" av="" lav="" lmv=""/>
        """
        demo_attributes = self._demo_details
        demo = etree.SubElement(pid, "Demo", {
            'lang': self._lang
        })

        if "Pi" in demo_attributes:
            if self.set_demo_attributes(demo, "Pi", demo_attributes['Pi']):
                self._uses['pi'] = "y"
        if "Pa" in demo_attributes:
            if self.set_demo_attributes(demo, "Pa", demo_attributes['Pa']):
                self._uses['pa'] = "y"
        if "Pfa" in demo_attributes:
            if self.set_demo_attributes(demo, "Pfa", demo_attributes['Pfa']):
                self._uses['pfa'] = "y"
